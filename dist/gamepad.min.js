/*!
 * gamepad.js 0.0.1
 * https://github.com/Tom32i/gamepad.js
 * Copyright 2014 Thomas JARRAND
 */

function EventEmitter(){this._eventElement=document.createElement("div")}function OptionResolver(t){this.allowExtra="undefined"!=typeof t&&t,this.defaults={},this.types={},this.optional=[],this.required=[]}function GamepadHandler(t,e){EventEmitter.call(this),this.gamepad=t,this.sticks=new Array(this.gamepad.axes.length),this.buttons=new Array(this.gamepad.buttons.length),this.options=this.resolveOptions(e);for(var o=this.sticks.length-1;o>=0;o--)this.sticks[o]=[0,0];for(var i=this.buttons.length-1;i>=0;i--)this.buttons[i]=!1;this.gamepad.handler=this}function GamepadListener(t){EventEmitter.call(this),this.options="object"==typeof t?t:{},this.frame=null,this.gamepads=[],this.update=this.update.bind(this),this.onAxis=this.onAxis.bind(this),this.onButton=this.onButton.bind(this),this.stop=this.stop.bind(this),window.addEventListener("error",this.stop),this.start()}EventEmitter.prototype.emit=function(t,e){this._eventElement.dispatchEvent(new CustomEvent(t,{detail:e}))},EventEmitter.prototype.addEventListener=function(t,e){this._eventElement.addEventListener(t,e,!1)},EventEmitter.prototype.removeEventListener=function(t,e){this._eventElement.removeEventListener(t,e,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addEventListener,EventEmitter.prototype.off=EventEmitter.prototype.removeEventListener,OptionResolver.prototype.setDefaults=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.defaults[e]=t[e]);return this},OptionResolver.prototype.setTypes=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.types[e]=t[e]);return this},OptionResolver.prototype.setOptional=function(t){return this.allowExtra?void 0:(this.addToArray(this.optionals,t),this)},OptionResolver.prototype.setRequired=function(t){return this.addToArray(this.required,t),this},OptionResolver.prototype.resolve=function(t){var e={};for(var o in this.defaults)this.defaults.hasOwnProperty(o)&&(e[o]=this.getValue(t,o));for(var i=this.required.length-1;i>=0;i--)if(o=this.required[i],"undefined"==typeof e[o])throw'Option "'+o+'" is required.';return e},OptionResolver.prototype.getValue=function(t,e){var o=null;if(!this.optionExists(e))throw'Unkown option "'+e+'".';return"undefined"!=typeof t[e]?o=t[e]:"undefined"!=typeof this.defaults[e]&&(o=this.defaults[e]),this.checkType(e,o),o},OptionResolver.prototype.checkType=function(t,e){var o="undefined"!=typeof this.types[t]?this.types[t]:!1,i=typeof e;if(o&&i!==o&&("string"===o&&(e=String(e)),"boolean"===o&&(e=Boolean(e)),"number"===o&&(e=Number(e)),i=typeof e,o!==i))throw'Wrong type for option "'+t+'". Expected '+this.types[t]+" but got "+typeof e},OptionResolver.prototype.optionExists=function(t){return this.allowExtra?!0:"undefined"!=typeof this.defaults[t]||this.optional.indexOf(t)>=0||this.required.indexOf(t)>=0},OptionResolver.prototype.addToArray=function(t,e){for(var o,i=e.length-1;i>=0;i--)o=e[i],t.indexOf(o)>=0&&t.push(o)},GamepadHandler.prototype=Object.create(EventEmitter.prototype),GamepadHandler.prototype.constructor=GamepadHandler,GamepadHandler.prototype.optionResolver=new OptionResolver(!1),GamepadHandler.prototype.optionResolver.setDefaults({analog:!0,deadZone:0,precision:0}),GamepadHandler.prototype.optionResolver.setTypes({analog:"boolean",deadZone:"number",precision:"number"}),GamepadHandler.prototype.resolveOptions=function(t){var e="undefined"!=typeof t.stick,o="undefined"!=typeof t.button,i={stick:this.optionResolver.resolve(e?t.stick:o?{}:t),button:this.optionResolver.resolve(o?t.button:e?{}:t)};return i.stick.deadZone=Math.max(Math.min(i.stick.deadZone,1),0),i.button.deadZone=Math.max(Math.min(i.button.deadZone,1),0),i.stick.precision=i.stick.precision?Math.pow(10,i.stick.precision):0,i.button.precision=i.button.precision?Math.pow(10,i.button.precision):0,i},GamepadHandler.prototype.update=function(){var t=0,e=0,o=0;for(e=0;2>e;e++)for(o=0;2>o;o++)this.setStick(e,o,this.gamepad.axes[t],this.options.stick),t++;for(t=this.gamepad.buttons.length-1;t>=0;t--)this.setButton(t,this.gamepad.buttons[t],this.options.button)},GamepadHandler.prototype.setStick=function(t,e,o,i){i.deadZone&&o<i.deadZone&&o>-i.deadZone&&(o=0),i.analog?i.precision&&(o=Math.round(o*i.precision)/i.precision):o=o>0?1:0>o?-1:0,this.sticks[t][e]!==o&&(this.sticks[t][e]=o,this.emit("axis",{gamepad:this.gamepad,axis:e,value:this.sticks[t][e]}))},GamepadHandler.prototype.setButton=function(t,e,o){var i=e.value;o.deadZone&&e.value<o.deadZone&&e.value>-o.deadZone&&(i=0),o.analog?o.precision&&(i=Math.round(i*o.precision)/o.precision):i=e.pressed?1:0,this.buttons[t]!==i&&(this.buttons[t]=i,this.emit("button",{gamepad:this.gamepad,button:e,index:t,pressed:e.pressed,value:i}))},GamepadListener.prototype=Object.create(EventEmitter.prototype),GamepadListener.prototype.constructor=GamepadListener,GamepadListener.prototype.start=function(){this.frame||this.update()},GamepadListener.prototype.stop=function(){this.frame&&(window.cancelAnimationFrame(this.frame),this.frame=null)},GamepadListener.prototype.update=function(){this.frame=window.requestAnimationFrame(this.update),this.checkForNewGamepad();for(var t=this.gamepads.length-1;t>=0;t--)this.gamepads[t].handler.update()},GamepadListener.prototype.checkForNewGamepad=function(){var t=this.getGamepads();if(t.length!==this.gamepads.length)for(var e=t.length-1;e>=0;e--)t[e]&&this.gamepads.indexOf(t[e])<0&&this.addGamepad(t[e])},GamepadListener.prototype.addGamepad=function(t){var e=new GamepadHandler(t,this.options);this.gamepads.push(t),e.on("axis",this.onAxis),e.on("button",this.onButton)},GamepadListener.prototype.onAxis=function(t){this.emit("axis",t.detail)},GamepadListener.prototype.onButton=function(t){this.emit("button",t.detail)},GamepadListener.prototype.getGamepads=function(){return"undefined"!=typeof navigator.getGamepads?navigator.getGamepads():"undefined"!=typeof navigator.webkitGetGamepads?navigator.webkitGetGamepads():null};